// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Not(in=instruction[15], out=storeAins);
    // d1 = 1, store value to ARegister
    And(a=instruction[15], b=instruction[5], out=storeCins);
    Or(a=storeAins, b=storeCins, out=storeAReg);		
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Avalue);	// Op-code = 0 -> chọn instruction, Op-code = 1 ->chọn ALUout 
    ARegister(in=Avalue, load=storeAReg, out=ARegout, out[0..14]=addressM);

    // d2 = 1, store value to DRegister
    And(a=instruction[15], b=instruction[4], out=storeDReg);
    DRegister(in=ALUout, load=storeDReg, out=DRegout);

    // a = 0 -> chọn ARegout, a = 1 -> chọn inM
    Mux16(a=ARegout, b=inM, sel=instruction[12], out=ALUinM);
	// zx -> no = c1 -> c6
    ALU(x=DRegout, y=ALUinM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

    // Op-code = 1, d3 = 1, store value to Memory[A]
    And(a=instruction[15], b=instruction[3], out=writeM);

    // jump
    Or(a=zr, b=ng, out=orzrng);
    // out > 0
    Not(in=orzrng, out=positive);
    And(a=instruction[0], b=positive, out=JGT);
    // out = 0
    And(a=instruction[1], b=zr, out=JEQ);
    // out < 0
    And(a=instruction[2], b=ng, out=JLT);
    Or(a=JGT, b=JEQ, out=or1);
    Or(a=or1, b=JLT, out=or2);
    And(a=or2, b=instruction[15], out=JUMP);
    PC(in=ARegout, load=JUMP, inc=true, reset=reset, out[0..14]=pc);


}

/*
  *             15 14 13 12   11 10  9  8    7  6  5  4    3  2  1  0
  * Instruction  i  x  x  a   c1 c2 c3 c4   c5 c6 d1 d2   d3 j1 j2 j3
  *
  * Destination
  * d1 = 1, A register
  * d2 = 1, D register
  * d3 = 1, Memory[A]
  *
  * ALU: x = D, y = A(a=0) or M(a=1), zx = c1, nx = c2, zy = c3, ny = c4, f = c5, no = c6
  *
  * Jump consition
  * instruction[15] = 1
  * instruction[0] = 1, zr = 0, ng = 0 (>0)
  * instruction[1] = 1, zr = 1 (=0)
  * instruction[2] = 1, ng = 1 (<0)
  */