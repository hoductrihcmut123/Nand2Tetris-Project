// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

// Chọn vùng nhớ để đưa dữ liệu vào, xét giá trị address[13..14]
DMux4Way(in=load, sel=address[13..14], a=loadram0, b=loadram1, c=loadscreen, d=loadkeyboard);

Or(a=loadram0, b=loadram1, out=loadram);
RAM16K(in=in, load=loadram, address=address[0..13], out=Ramout);		// 16K ô nhớ address[0..13]
Screen(in=in, load=loadscreen, address=address[0..12], out=Screenout);		// 8K ô nhớ address[0..12]
Keyboard(out=Keyboardout);

// Lấy dữ liệu ra
Mux4Way16(a=Ramout, b=Ramout, c=Screenout, d=Keyboardout, sel=address[13..14], out=out);

}

/*
 * Memory 00 01 00000 = 0x0000 = 00000000 00000000	(16 bit)
 *              16383 = 0x3FFF = 00111111 11111111  
 * Screen 01    16384 = 0x4000 = 01000000 00000000
 *              24575 = 0x5FFF = 01011111 11111111
 * Keyboard 11  24576 = 0x6000 = 01100000 00000000
 */